What is a FASTA File?
A FASTA file is a text-based file format widely used in bioinformatics to store biological sequence data, such as DNA, RNA, or protein sequences. Developed in the 1980s by David Lipman and William Pearson for the FASTA software package, it is simple, human-readable, and standardized, making it compatible with many bioinformatics tools for tasks like sequence alignment (e.g., BLAST), genome assembly, annotation, phylogenetic analysis, or variant calling. FASTA files are commonly used in databases like NCBI GenBank, UniProt, and Ensembl, and they can store single or multiple sequences.
Since FASTA files are plain text, you can open and edit them with any text editor (e.g., Notepad, Vim, or VS Code). However, genomic data, such as bacterial genomes, can be large (several megabytes or more), so they are often managed with specialized libraries like Biopython (Python) or SeqIO (Perl) and tracked in version control with Git LFS for efficient storage.
Structure of a FASTA File
A FASTA file consists of one or more sequences, each with two main parts: a header line and the sequence data. Sequences are often wrapped at 60–80 characters per line for readability, but there are no strict rules on line length.
•	Header Line:
-	Always starts with a greater-than symbol ('>') as the very first character of the line, with no exceptions. This is a strict requirement of the FASTA format.
-	Immediately after the '>' (with no spaces), a unique sequence identifier follows, such as a database accession number (e.g., NC_009848.4 from NCBI) or a custom label.
-	An optional description may follow the identifier, separated by a space, providing metadata like the organism name, gene function, or sequence type (e.g., "Bacillus amyloliquefaciens DSM 7, complete genome").
-	The header ends with a newline character.
•	Sequence Data:
-	Starts on the line(s) after the header.
-	Uses single-letter codes for nucleotides (DNA/RNA: A, C, G, T/U, or ambiguity codes like N for unknown) or amino acids (proteins: A, C, D, E, etc.).
-	Can span multiple lines, typically 60–80 characters each.
-	Contains only the specified codes—no spaces or special characters.
-	Ends before the next header (in multi-sequence files) or at the file's end.
FASTA files can be "multi-FASTA," containing multiple sequences, each starting with its own header marked by a '>'. This is useful for storing gene sets, contigs from genome assembly, or protein families. No special terminators separate sequences; a new '>' marks the next entry.

What is a Contig?
A contig (short for "contiguous sequence") is a continuous, gap-free segment of DNA assembled from overlapping short reads produced during high-throughput sequencing. Sequencing technologies generate short reads (e.g., 100–300 base pairs), which are computationally aligned and merged to form longer contigs. In genome assembly, a complete genome may consist of one contig (e.g., for small bacterial genomes) or multiple contigs (for larger or incomplete assemblies, like draft genomes). In multi-FASTA files, each contig typically has its own header starting with '>', representing a distinct assembled segment. Gaps between contigs (due to repetitive regions or low sequencing coverage) may be resolved in scaffolds, which link contigs with estimated gaps.
Common File Extensions
•	.fasta or .fa: Generic for any FASTA file.
•	.fna: For nucleic acid sequences (e.g., DNA genomes).
•	.faa: For amino acid (protein) sequences.
•	.ffn: For nucleotide sequences of features (e.g., genes).

Example FASTA File
Below is an example of a single-sequence FASTA file (e.g., example.fna):
>NC_009848.4 Bacillus amyloliquefaciens DSM 7, complete genome ATGCGTACGTTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCT AGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGC TAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAG CTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTA ...
•	Header: '>NC_009848.4 Bacillus amyloliquefaciens DSM 7, complete genome'. The '>' is mandatory and always the first character.
•	Sequence: Starts with 'ATGCGT...' and may span millions of bases.
A multi-FASTA example:
>Sequence1 Short DNA fragment from E. coli ATGCAGTCGATCGTAGCTAGCTAGCT AGCTAGCTAGCTAGCTAGCTAGCTAGC >Sequence2 Protein sequence from human MTEYKLVVVGAGGVGKSALTIQLIQNHFVDEYDPTIEDSYRKQVVIDGETCLLDILDTAG QEEYSAMRDQYMRTGEGFLCVFAINNTKSFEDIHQYREQIKRVKDSDDVPMVLVGNKCDL
Considerations for the iSignify Program
In the iSignify program, FASTA files (e.g., in data/Processed_FASTA_files) are used for analyzing biological sequences, such as bacterial genomes (e.g., NC_009848.4.ins.fna). The program requires each FASTA file to contain only one sequence with a single header, starting with '>', to ensure compatibility with its analysis pipeline, such as whole-genome alignment, gene prediction, or other bioinformatics tasks.
Potential Issues with Multi-Contig Genomes
Genome sequences from assembly tools (e.g., SPAdes, Velvet) or incomplete draft genomes are often multi-FASTA files, where each contig (a contiguous segment of the assembly) has its own header starting with '>'. For example, a bacterial genome might be split into multiple contigs due to sequencing gaps or incomplete assembly. This can cause errors in iSignify, which expects a single continuous sequence per file.
Pre-Processing Multi-FASTA Files
To make FASTA files compatible with iSignify, process them to merge multiple contigs into a single sequence with one header. Use a string of ambiguous bases ('N's) as spacers between contigs to preserve boundaries and maintain approximate genome length. This ensures downstream tools (e.g., gene predictors) treat the sequence as a single unit while recording contig separations.

Recommended Steps for Processing
1.	Inspect the File: Check if the file is multi-FASTA by counting headers:
grep -c -E '^>' data/Processed_FASTA_files/example.fna
If the count is greater than 1, the file needs processing.
2.	Merge Contigs: Use a script or tool to combine contigs, retaining the first header (starting with '>') and inserting 100 'N's between contigs (adjust the number as needed).
With Biopython (Python): Install Biopython:
pip install biopython
Save this script as merge_fasta.py:
from Bio import SeqIO
import sys

input_file = sys.argv[1]  # e.g., data/Processed_FASTA_files/NC_009848.4.ins.fna
output_file = sys.argv[2]  # e.g., data/Processed_FASTA_files/NC_009848.4.ins_processed.fna

records = list(SeqIO.parse(input_file, "fasta"))
if len(records) > 1:
    merged_seq = records[0].seq
    for record in records[1:]:
        merged_seq += 'N' * 100 + record.seq
    records[0].seq = merged_seq
    SeqIO.write(records[0], output_file, "fasta")
    print(f"Merged {len(records)} contigs into {output_file}")
else:
    print("File already has one sequence; no changes needed.")
Run it:
python merge_fasta.py data/Processed_FASTA_files/NC_009848.4.ins.fna data/Processed_FASTA_files/NC_009848.4.ins_processed.fna
With AWK (Command-Line, No Dependencies):
awk '
BEGIN { header = ""; seq = ""; spacer = "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN"; }
/^>/ {
    if (header != "") { print header; print seq; seq = ""; }
    header = $0;
    next;
}
{ seq = seq ? seq spacer $0 : $0; }
END { if (header != "") { print header; print seq; } }
' data/Processed_FASTA_files/NC_009848.4.ins.fna > data/Processed_FASTA_files/NC_009848.4.ins_processed.fna
3.	Verify the Output: Confirm the processed file has one header:
grep -c -E '^>' data/Processed_FASTA_files/NC_009848.4.ins_processed.fna
Expected output: 1 Count spacers to verify contig boundaries:
grep -o 'N\{100\}' data/Processed_FASTA_files/NC_009848.4.ins_processed.fna | wc -l
Output equals the number of original contigs minus 1.
4.	Update the Repository: Add the processed file to Git, using Git LFS for large files:
5.	git lfs track "data/Processed_FASTA_files/*.fna"
6.	git add -f data/Processed_FASTA_files .gitattributes
7.	git commit -m "Processed multi-contig FASTA files for single-header format"
git push origin main
If the 'data' directory is ignored by .gitignore, use 'git add -f' or modify .gitignore to allow data/Processed_FASTA_files.

Why Single-Header Format for iSignify?
iSignify expects a single sequence per file, with a header starting with '>', to streamline analyses like whole-genome alignment or gene prediction. Merging contigs with 'N' spacers maintains genome structure and avoids errors from multi-headers. Use 100 'N's as a default spacer length; too few may cause false gene fusions, while too many inflate file size. Adjust based on your analysis needs.
For advanced processing, consider tools like seqkit or samtools faidx for indexing and manipulation. Always cite accession numbers (e.g., NC_009848.4) in analysis reports when using database-derived FASTA files.

